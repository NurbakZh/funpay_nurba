from __future__ import annotations

import json
import requests
from bs4 import BeautifulSoup
import schedule
import time
import threading
import pytz
from datetime import datetime
from logging import getLogger
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cardinal import Cardinal

NAME = "Lots Data Plugin"
VERSION = "0.0.1"
DESCRIPTION = "–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä –Ω–∞ FunPay"
CREDITS = "@nurba_zh"
SETTINGS_PAGE = False
UUID = "f5b3b3b4-0b3b-4b3b-8b3b-0b3b3b3b3b4b"

logger = getLogger("FPC.lots_data_plugin")
RUNNING = False

def fetch_filters_data(url, headers):
    """Fetches filter data from a specific page."""
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        filters_data = {}
        
        # Find showcase-filters div
        showcase_filters = soup.find('div', class_='showcase-filters')
        if showcase_filters:
            # Find all form-group lot-field divs
            form_groups = showcase_filters.find_all('div', class_='form-group lot-field')
            
            for group in form_groups:
                data_id = group.get('data-id')
                if not data_id:
                    continue
                
                # Get all options and buttons
                options = group.find_all('option')
                buttons = group.find_all('button')
                
                values = []
                # Extract text from options
                for option in options:
                    if option.text.strip():
                        values.append(option.text.strip())
                
                # Extract text from buttons
                for button in buttons:
                    if button.text.strip():
                        values.append(button.text.strip())
                
                if values:
                    filters_data[data_id] = values
                    
        return filters_data
    except requests.RequestException as e:
        logger.error(f"Error fetching filters data from {url}: {str(e)}")
        return None

def fetch_game_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö —Å —Å–∞–π—Ç–∞ FunPay."""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    }
    url = "https://funpay.com/"
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        games_data = {}

        # Find all promo-game-items
        promo_games = soup.find_all('div', class_='promo-game-item')
        
        for game in promo_games:
            # Get game title
            game_title_elem = game.find('div', class_='game-title')
            if not game_title_elem:
                continue
                
            game_title = game_title_elem.text.strip()
            
            # Get all child items from the list
            child_items = []
            list_items = game.find_all('li')
            for li in list_items:
                link = li.find('a')
                if link:
                    full_link = f"https://funpay.com{link.get('href', '')}" if link.get('href', '').startswith('/') else link.get('href', '')
                    filters = fetch_filters_data(full_link, headers)
                    child_items.append({
                        'name': link.text.strip(),
                        'link': full_link,
                        'filters': filters or {}
                    })
            
            games_data[game_title] = child_items
            
        return games_data
        
    except requests.RequestException as e:
        logger.error(f"Error fetching game data: {str(e)}")
        return None

def save_game_data(data, filename='storage/plugins/game_data.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –≤ JSON —Ñ–∞–π–ª."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.info("–î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö: {str(e)}")

def load_game_data(filename='storage/plugins/game_data.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.info("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö: {str(e)}")
        return {}

def compare_and_get_changes(old_data, new_data):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    changes = []
    
    # Check for new games
    for game_title in new_data:
        if game_title not in old_data:
            changes.append(f"üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞: {game_title}")
            continue
            
        # Check for changes in existing games
        old_items = {item['name']: item for item in old_data[game_title]}
        new_items = {item['name']: item for item in new_data[game_title]}
        
        # Find added and removed sections
        added_sections = set(new_items.keys()) - set(old_items.keys())
        removed_sections = set(old_items.keys()) - set(new_items.keys())
        
        for name in added_sections:
            changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª '{name}' –≤ –∏–≥—Ä–µ {game_title}")
            
        for name in removed_sections:
            changes.append(f"‚ûñ –£–¥–∞–ª–µ–Ω —Ä–∞–∑–¥–µ–ª '{name}' –∏–∑ –∏–≥—Ä—ã {game_title}")
        
        # Check filter changes in existing sections
        common_sections = set(new_items.keys()) & set(old_items.keys())
        for section in common_sections:
            old_filters = old_items[section].get('filters', {})
            new_filters = new_items[section].get('filters', {})
            
            # Check for new and removed filter categories
            added_categories = set(new_filters.keys()) - set(old_filters.keys())
            removed_categories = set(old_filters.keys()) - set(new_filters.keys())
            
            for category in added_categories:
                changes.append(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ '{category}' –≤ —Ä–∞–∑–¥–µ–ª–µ '{section}' –∏–≥—Ä—ã {game_title}")
            
            for category in removed_categories:
                changes.append(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ '{category}' –≤ —Ä–∞–∑–¥–µ–ª–µ '{section}' –∏–≥—Ä—ã {game_title}")
            
            # Check for changes in existing filter categories
            common_categories = set(new_filters.keys()) & set(old_filters.keys())
            for category in common_categories:
                old_values = set(old_filters[category])
                new_values = set(new_filters[category])
                
                added_values = new_values - old_values
                removed_values = old_values - new_values
                
                if added_values:
                    changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ '{', '.join(added_values)}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Ä–∞–∑–¥–µ–ª–∞ '{section}' –∏–≥—Ä—ã {game_title}")
                if removed_values:
                    changes.append(f"‚ûñ –£–¥–∞–ª–µ–Ω—ã –æ–ø—Ü–∏–∏ '{', '.join(removed_values)}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Ä–∞–∑–¥–µ–ª–∞ '{section}' –∏–≥—Ä—ã {game_title}")
    
    # Check for removed games
    for game_title in old_data:
        if game_title not in new_data:
            changes.append(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –∏–≥—Ä–∞: {game_title}")
            
    return changes

def check_for_updates(cardinal: Cardinal, chat_id=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö."""
    cardinal.telegram.bot.send_message(
        chat_id,
        "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞...."
    )
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä...")

    
    try:
        new_data = fetch_game_data()
        if new_data is None:
            return
            
        old_data = load_game_data()
        changes = compare_and_get_changes(old_data, new_data)
        
        if changes:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            save_game_data(new_data)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = "üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä FunPay üéÆ\n\n"
            message += "\n".join(changes)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
            if cardinal.telegram and chat_id:
                try:
                    cardinal.telegram.bot.send_message(
                        chat_id,
                        message,
                        parse_mode="Markdown"
                    )
                    cardinal.telegram.bot.send_message(
                        chat_id,
                        "‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéÆ"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {str(e)}")
        else:
            logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            if chat_id and cardinal.telegram:
                cardinal.telegram.bot.send_message(
                    chat_id, 
                    "‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéÆ"
                )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_for_updates: {str(e)}")

def schedule_task(cardinal: Cardinal):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    def job():
        now = datetime.now(moscow_tz)
        if now.hour == 10 and now.minute == 0:
            check_for_updates(cardinal)

    schedule.every().minute.do(job)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

def start_scheduler(cardinal: Cardinal, chat_id=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    global RUNNING
    if not RUNNING:
        RUNNING = True
        thread = threading.Thread(target=schedule_task, args=(cardinal,))
        thread.daemon = True
        thread.start()
        logger.info("Scheduler started successfully")
        if chat_id and cardinal.telegram:
            cardinal.telegram.bot.send_message(
                chat_id,
                "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä FunPay —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
                "‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n"
                "üéÆ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
            )

def init_commands(cardinal: Cardinal):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
    if not cardinal.telegram:
        return
    def handle_check_now(message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
        thread = threading.Thread(target=check_for_updates, args=(cardinal, message.chat.id))
        thread.daemon = True
        thread.start()

    def handle_start_monitoring(message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        start_scheduler(cardinal, message.chat.id)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç
    cardinal.add_telegram_commands(UUID, [
        ("check_games_now", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", True),
        ("start_games_monitoring", "–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä", True),
    ])

    # Register command handlers
    cardinal.telegram.msg_handler(handle_check_now, commands=["check_games_now"])
    cardinal.telegram.msg_handler(handle_start_monitoring, commands=["start_games_monitoring"])

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None