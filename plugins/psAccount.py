from __future__ import annotations

import json
import requests
import os
from bs4 import BeautifulSoup
import schedule
import time
import threading
import pytz
import FunPayAPI.types
from FunPayAPI.account import Account
from logging import getLogger
from telebot.types import Message, InlineKeyboardMarkup as K, InlineKeyboardButton as B
from tg_bot import static_keyboards as skb
from datetime import datetime, timedelta
from typing import TYPE_CHECKING, Dict, List, Optional
from parser_helper import get_account_game_link
from plugins.parser import generate_random_id, translate_text

if TYPE_CHECKING:
    from cardinal import Cardinal

NAME = "PlayStation Accounts –ê–†–ï–ù–î–ê Plugin"
VERSION = "0.0.1"
DESCRIPTION = "–î–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ PlayStation"
CREDITS = "@nurba_zh"
SETTINGS_PAGE = False
UUID = "f5b3b3b4-0b3b-4b3b-8b3b-0b3b3b3b3b9b"

logger = getLogger("FPC.ps_accounts_plugin")
RUNNING = False

class Account:
    def __init__(self, login: str, password: str, is_rented: bool = False, time_of_rent: Optional[datetime] = None, additional_info: str = None):
        self.login = login
        self.password = password
        self.is_rented = is_rented
        self.time_of_rent = time_of_rent
        self.additional_info = additional_info

    def to_dict(self) -> dict:
        return {
            "login": self.login,
            "password": self.password,
            "is_rented": self.is_rented,
            "time_of_rent": self.time_of_rent.isoformat() if self.time_of_rent else None,
            "additional_info": self.additional_info
        }

    @staticmethod
    def from_dict(data: dict) -> 'Account':
        return Account(
            login=data["login"],
            password=data["password"],
            is_rented=data.get("is_rented", False),
            time_of_rent=datetime.fromisoformat(data["time_of_rent"]) if data.get("time_of_rent") else None,
            additional_info=data.get("additional_info")
        )

class Game:
    def __init__(self, name: str, lot_name: str, prices: Dict[str, Dict[str, str]], accounts: List[Account] = None, edition_name: str = ""):
        self.name = name
        self.lot_name = lot_name
        self.prices = prices
        self.accounts = accounts or []
        self.edition_name = edition_name

    def to_dict(self) -> dict:
        return {
            "name": self.name,
            "lot_name": self.lot_name,
            "prices": self.prices,
            "accounts": [account.to_dict() for account in self.accounts],
            "edition_name": self.edition_name
        }

    @staticmethod
    def from_dict(data: dict) -> 'Game':
        accounts = [Account.from_dict(acc) for acc in data["accounts"]]
        return Game(
            name=data["name"],
            lot_name=data["lot_name"],
            prices=data["prices"],
            accounts=accounts,
            edition_name=data["edition_name"]
        )

def save_games(games: List[Game]):
    storage_dir = os.path.join(os.path.dirname(__file__), '../storage/plugins')
    os.makedirs(storage_dir, exist_ok=True)
    file_path = os.path.join(storage_dir, 'ps_accounts.json')
    
    data = [game.to_dict() for game in games]
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def edit_game(lot_name: str, updated_data: dict):
    games = load_games()
    for game in games:
        if game.lot_name == lot_name:
            for key, value in updated_data.items():
                if hasattr(game, key):
                    if key == "prices":
                        for duration, price_data in value.items():
                            if not isinstance(price_data, dict):
                                continue
                            if "price" not in price_data:
                                price_data["price"] = 0.0
                            if "url" not in price_data:
                                price_data["url"] = ""
                    setattr(game, key, value)
            break
    save_games(games)

def load_games() -> List[Game]:
    storage_dir = os.path.join(os.path.dirname(__file__), '../storage/plugins')
    file_path = os.path.join(storage_dir, 'ps_accounts.json')
    
    if not os.path.exists(file_path):
        return []
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return [Game.from_dict(game_data) for game_data in data]

duration_names = {
    "1h": "1 —á–∞—Å",
    "3h": "3 —á–∞—Å–∞",
    "6h": "6 —á–∞—Å–æ–≤",
    "1d": "1 –¥–µ–Ω—å",
    "3d": "3 –¥–Ω—è",
    "5d": "5 –¥–Ω–µ–π",
    "7d": "7 –¥–Ω–µ–π"
}

def format_game_info(game: Game) -> str:
    info_msg = f"üéÆ *{game.lot_name}* - *{game.name}*\n\n"
    info_msg += "üí∞ *–¶–µ–Ω—ã:*\n"
    for duration, price_data in game.prices.items():
        readable_duration = duration_names.get(duration, duration)
        info_msg += f"‚Ä¢ *{readable_duration}*: {price_data['price']} —Ä—É–±."
        if price_data.get('url'):
            info_msg += f" ([–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç]({price_data['url']}))"
        info_msg += "\n"
    info_msg += f"\nüìä *–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ:* {len(game.accounts)}\n"
    info_msg += f"üîÑ *–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–æ:* {sum(1 for acc in game.accounts if acc.is_rented)}\n"
    info_msg += f"‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ:* {sum(1 for acc in game.accounts if not acc.is_rented)}\n"
    
    if game.accounts:
        info_msg += "\nüìù *–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n"
        for i, acc in enumerate(game.accounts, 1):
            status = "üîí –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω" if acc.is_rented else "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            info_msg += f"{i}. –õ–æ–≥–∏–Ω: {acc.login} - {status}"
            if acc.additional_info:
                info_msg += f"\n–î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: - ‚ÑπÔ∏è {acc.additional_info}"
            info_msg += "\n"
    
    return info_msg

def generate_summary_text(game_name: str, duration: str, ru: bool) -> str:
    if ru:
        return f"üñ§‚ù§Ô∏è„Äê{game_name}„Äë‚ù§Ô∏èüñ§„ÄêPS 5„Äëüñ§‚ù§Ô∏è„Äê–ê—Ä–µ–Ω–¥–∞ –Ω–∞ {duration}„Äë‚ù§Ô∏èüñ§„Äê–ü2„Äëüñ§„Äê–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞„Äëüñ§‚ù§Ô∏è"
    else:
        return f"üñ§‚ù§Ô∏è„Äê{game_name}„Äë‚ù§Ô∏èüñ§„ÄêPS 5„Äëüñ§‚ù§Ô∏è„ÄêRent for {duration}„Äë‚ù§Ô∏èüñ§„ÄêP2„Äëüñ§„ÄêAuto-delivery„Äëüñ§‚ù§Ô∏è"

def generate_description_text(game_name: str) -> str:
    return f"""‚ùóÔ∏è–°—Ç–æ–∏—Ç –ê–í–¢–û-–í–´–î–ê–ß–ê‚ùóÔ∏è
‚ùóÔ∏è–ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, —Ç–æ —Ç–æ–≤–∞—Ä –ê–ö–¢–£–ê–õ–ï–ù‚ùóÔ∏è
‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—à–ª–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –∏–≥—Ä–æ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. –ù–µ –Ω—É–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –Ω–∞ –º–µ—Å—Ç–µ –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç‚ùóÔ∏è
‚ùóÔ∏è–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ø—Ä–æ–¥–∞–≤—Ü—É –∫–æ–º–∞–Ω–¥—É !arenda_ps (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã)‚ùóÔ∏è

üîΩ‚ùóÔ∏è‚ùì–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞—Ä–µ–Ω–¥–∞?‚ùì‚ùóÔ∏èüîΩ
1Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –ª–æ—Ç–∞ —Å –Ω—É–∂–Ω—ã–º –≤–∞–º –≤—Ä–µ–º–µ–Ω–µ–º.
2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ playstation.
3Ô∏è‚É£ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).

‚úîÔ∏è –ü2 - –∞—Ä–µ–Ω–¥–∞ –∏–≥—Ä—ã, –∏–≥—Ä–∞–µ—Ç–µ —Å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!
(–∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏) - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –Ω–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ü2 –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–≤–æ—é –∫–æ–Ω—Å–æ–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞ –Ω–∞—à –∞–∫–∫–∞—É–Ω—Ç –í—ã –æ–±—è–∑–∞–Ω—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é.
‚úîÔ∏è –¢–∞–∫–∂–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ —Å–ø–æ—Å–æ–±—É –ü2 –Ω–∞ PS5.

‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ:
- –í—Ö–æ–¥–∏—Ç—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —Å –±—Ä–∞—É–∑–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ‚Äì –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω—Å–æ–ª–∏.
- –ò–∑–º–µ–Ω—è—Ç—å –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.
- –ú–µ–Ω—è—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Ö–æ–¥–∞ –≤ —Å–µ—Ç—å. –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
- –û—Ç–∫–ª—é—á–∞—Ç—å, –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
–ø–∞—Ä–æ–ª—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏).
üí¢ –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∞–≤–∏–ª, –≤—ã —Ç—É—Ç –∂–µ –ª–∏—à–∞–µ—Ç–µ—Å—å –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É (–¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤).
üí¢ –ï—Å–ª–∏ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ—á—Ç–∞, –ø–∞—Ä–æ–ª—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) –≤—ã —Å—Ä–∞–∑—É –ª–∏—à–∞–µ—Ç–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞.
üÜò - –ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–≥—Ä–æ–π –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–∑–æ—Ä—ã –Ω–∞ YouTube. –í–æ–∑–≤—Ä–∞—Ç—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, –¥—É–º–∞–ª —á—Ç–æ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–µ, –ø–µ—Ä–µ–ø—É—Ç–∞–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–≥—Ä—ã, —Ö–æ—Ç–µ–ª –∫—É–ø–∏—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É, –∫—É–ø–∏–ª –º–ª–∞–¥—à–∏–π –±—Ä–∞—Ç –∏–ª–∏ —Å—ã–Ω, –∏ —Ç.–¥. –ù–ï –î–ï–õ–ê–ï–ú.
üÜò PS Plus –û–¢–°–£–¢–°–¢–í–£–ï–¢

‚úÖ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –∏–≥—Ä–∞–π—Ç–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º! üéÆüî•"""

def update_lot(message: Message, game: Game, cardinal: Cardinal):
    try:
        node_id = get_account_game_link(game.lot_name)
        for duration, price_data in game.prices.items():
            readable_duration = duration_names.get(duration, duration)
            game_id = price_data["url"].split("=")[-1]
            lot_fields = cardinal.account.get_lots_field(node_id, game_id)
            available_accounts = [acc for acc in game.accounts if not acc.is_rented]
            if len(available_accounts) > 0:
                lot_fields["active"] = "on"
                lot_fields["amount"] = len(available_accounts)
            else:
                lot_fields["active"] = "off"
                lot_fields["amount"] = 0
            lot = FunPayAPI.types.LotFields(game_id, lot_fields)
            final_lot_id = lot.lot_id
            fields = lot.fields
            fields["offer_id"] = final_lot_id
            fields["csrf_token"] = cardinal.account.csrf_token
            lot.set_fields(fields)
            cardinal.account.save_lot(lot)
            logger.info(f"[LOTS COPY] –ò–∑–º–µ–Ω–∏–ª –ª–æ—Ç {node_id}.")
            if (message == "PS_arenda"):
                cardinal.telegram.bot.send_message("1284467388", f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ—Ç –¥–ª—è {game.name} –∞—Ä–µ–Ω–¥—ã –Ω–∞ {readable_duration}")
            else:   
                cardinal.telegram.bot.send_message(message.chat.id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ—Ç –¥–ª—è {game.name} –∞—Ä–µ–Ω–¥—ã –Ω–∞ {readable_duration}")
    except Exception as e:
        if (message == "PS_arenda"):
            cardinal.telegram.bot.send_message("1284467388", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")
        else:   
            cardinal.telegram.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞: {e}")

def init_commands(cardinal: Cardinal):
    if not cardinal.telegram:
        return
    tg = cardinal.telegram
    bot = cardinal.telegram.bot

    def create_lot(message: Message, game: Game):
        try:
            node_id = get_account_game_link(game.lot_name)
            lot_fields = cardinal.account.get_lots_variants(node_id, edition_name=game.edition_name)
            game_options = lot_fields["game_options"]
            platform_options = lot_fields["platform_options"]
            type_of_lot = lot_fields["type_of_lot"]
            
            suitable_game_option = {'value': '', 'text': ''}
            suitable_platform_option = {'value': '', 'text': ''}

            if game_options is not None:
                suitable_game_option = next((option for option in game_options if game.name in option["text"]), None)
                if suitable_game_option is None:
                    suitable_game_option = next((option for option in game_options if option["text"] in ["PlayStation", "PS", "PS5", "PlayStation 5"]), None)

            if platform_options is not None:
                suitable_platform_option = next((option for option in platform_options if option["text"] in ["PlayStation", "PS", "PS5", "PlayStation 5"]), None)
                if not suitable_platform_option:
                    raise Exception(f"No suitable platform option found for 'PlayStation' or 'PS5'")

            for duration, price_data in game.prices.items():
                readable_duration = duration_names.get(duration, duration)
                summary = generate_summary_text(game.name, readable_duration, ru=True)
                summary_en = generate_summary_text(game.name, translate_text(readable_duration, "en"), ru=False)
                description = generate_description_text(game.name)

                lot_fields = {
                    "active": "on",
                    "deactivate_after_sale": "",
                    "query": "",
                    "form_created_at": generate_random_id(),
                    "node_id": node_id,
                    "server_id": suitable_game_option["value"],
                    "location": "",
                    "deleted": "",
                    "fields[summary][ru]": summary,
                    "fields[summary][en]": summary_en,
                    "auto_delivery": "",
                    "price": price_data["price"],
                    "amount": len(game.accounts),
                    "fields[game]": game.name,
                    "fields[platform]": suitable_platform_option["value"],
                    "fields[desc][ru]": description,
                    "fields[desc][en]": translate_text(description, "en"),
                    "fields[type]": type_of_lot["value"] if type_of_lot else '',
                    "fields[type2]": type_of_lot["value"] if type_of_lot else ''
                }

                lot = FunPayAPI.types.LotFields(0, lot_fields)
                url = create_new_lot(cardinal.account, lot)
                bot.send_message(message.chat.id, f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–æ—Ç {game.name} –¥–ª—è –∞—Ä–µ–Ω–¥—ã –Ω–∞ {readable_duration}")
            profile = cardinal.account.get_user(cardinal.account.id)
            lots = profile.get_lots()
            counter = 6
            for lot in lots:
                if str(lot.subcategory.id) == str(node_id):
                    game.prices[list(duration_names.keys())[counter]]["url"] = lot.public_link
                    counter -= 1
            edit_game(game.lot_name, {"prices": game.prices})
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞: {e}")

    def handle_add_account(message: Message):
        msg = bot.send_message(message.chat.id, "üìß –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ PlayStation:")
        bot.register_next_step_handler(msg, process_login_step)

    def process_login_step(message: Message):
        login = message.text
        msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ PlayStation:")
        bot.register_next_step_handler(msg, process_password_step, login)

    def process_password_step(message: Message, login: str):
        password = message.text
        msg = bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ (–Ω–∞–ø–∏—à–∏—Ç–µ *none*, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):", parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_additional_info_step, login, password)

    def process_additional_info_step(message: Message, login: str, password: str):
        additional_info = None if message.text.lower() == "none" else message.text
        msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –≤ FunPay:")
        bot.register_next_step_handler(msg, process_lot_step, login, password, additional_info)

    def process_lot_step(message: Message, login: str, password: str, additional_info: str):
        lot_name = message.text
        msg = bot.send_message(message.chat.id, "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:")
        bot.register_next_step_handler(msg, process_game_step, login, password, additional_info, lot_name)

    def process_game_step(message: Message, login: str, password: str, additional_info: str, lot_name: str):
        game_name = message.text
        msg = bot.send_message(message.chat.id, "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –≤ FunPay:")
        bot.register_next_step_handler(msg, process_edition_step, login, password, additional_info, lot_name, game_name)

    def process_edition_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str):
        edition_name = message.text
        msg = bot.send_message(message.chat.id, "ÔøΩÔøΩ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 1 —á–∞—Å (–≤ —Ä—É–±–ª—è—Ö):")
        bot.register_next_step_handler(msg, process_price_1h_step, login, password, additional_info, lot_name, game_name, edition_name)

    def process_price_1h_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str):
        try:
            price_1h = str(float(message.text))
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 3 —á–∞—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, process_price_3h_step, login, password, additional_info, lot_name, game_name, edition_name, {"1h": {"price": price_1h, "url": ""}})
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_3h_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            price_3h = float(message.text)
            prices["3h"] = {"price": price_3h, "url": ""}
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 6 —á–∞—Å–æ–≤ (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, process_price_6h_step, login, password, additional_info, lot_name, game_name, edition_name, prices)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_6h_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            price_6h = float(message.text)
            prices["6h"] = {"price": price_6h, "url": ""}
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 1 –¥–µ–Ω—å (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, lambda m: process_price_1d_step(m, login, password, additional_info, lot_name, game_name, edition_name, prices))
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_1d_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            prices["1d"] = {"price": float(message.text), "url": ""}
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 3 –¥–Ω—è (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, lambda m: process_price_3d_step(m, login, password, additional_info, lot_name, game_name, edition_name, prices))
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_3d_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            prices["3d"] = {"price": float(message.text), "url": ""}
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 5 –¥–Ω–µ–π (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, lambda m: process_price_5d_step(m, login, password, additional_info, lot_name, game_name, edition_name, prices))
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_5d_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            prices["5d"] = {"price": float(message.text), "url": ""}
            msg = bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã –∑–∞ 7 –¥–Ω–µ–π (–≤ —Ä—É–±–ª—è—Ö):")
            bot.register_next_step_handler(msg, lambda m: process_price_7d_step(m, login, password, additional_info, lot_name, game_name, edition_name, prices))
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_price_7d_step(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        try:
            prices["7d"] = {"price": float(message.text), "url": ""}
            process_remaining_prices(message, login, password, additional_info, lot_name, game_name, edition_name, prices)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è /add_account")

    def process_remaining_prices(message: Message, login: str, password: str, additional_info: str, lot_name: str, game_name: str, edition_name: str, prices: dict):
        games = load_games()
        account = Account(login, password, additional_info=additional_info)
        
        try:
            game = next((g for g in games if g.lot_name == lot_name), None)
            if game:
                game.accounts.append(account)
            else:
                game = Game(game_name, lot_name, prices, [account], edition_name)
                games.append(game)
            
            save_games(games)
            bot.send_message(message.chat.id, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∏–≥—Ä—ã {game_name}, —Å–æ–∑–¥–∞—é –ª–æ—Ç—ã...")
            create_lot(message, game)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")

    def handle_add_account_to_game(message: Message):
        games = load_games()
        if not games:
            bot.send_message(message.chat.id, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /add_account")
            return

        keyboard = K()
        for game in games:
            keyboard.add(B(game.name, callback_data=f"select_game:{game.name}"))
        
        bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=keyboard)

    def handle_get_info_about_game(message: Message):
        games = load_games()
        if not games:
            bot.send_message(message.chat.id, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /add_account")
            return

        keyboard = K()
        for game in games:
            keyboard.add(B(game.name, callback_data=f"info_game:{game.name}"))
        
        bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)

    def handle_delete_account_from_game(message: Message):
        games = load_games()
        if not games:
            bot.send_message(message.chat.id, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–≥—Ä. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /add_account")
            return

        keyboard = K()
        for game in games:
            keyboard.add(B(game.name, callback_data=f"delete_from_game:{game.name}"))
        
        bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_game:"))
    def handle_message(call):
        game_name = call.data.split(":")[1].strip()
        empty_markup = K([])
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        
        games = load_games()
        game = next((g for g in games if g.name == game_name), None)
        
        if game:
            info_msg = format_game_info(game)
            bot.send_message(call.message.chat.id, info_msg, parse_mode="Markdown")
        
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ PlayStation:")
        bot.register_next_step_handler(msg, lambda m: process_login_for_existing_game_step(m, game_name))

    def process_login_for_existing_game_step(message: Message, game_name: str):
        login = message.text
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ PlayStation:")
        bot.register_next_step_handler(msg, lambda m: process_password_for_existing_game_step(m, game_name, login))

    def process_password_for_existing_game_step(message: Message, game_name: str, login: str):
        password = message.text
        msg = bot.send_message(message.chat.id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ (–Ω–∞–ø–∏—à–∏—Ç–µ *none*, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):", parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_additional_info_for_existing_game_step, game_name, login, password)

    def process_additional_info_for_existing_game_step(message: Message, game_name: str, login: str, password: str):
        additional_info = None if message.text.lower() == "none" else message.text
        add_account_to_existing_game(message, game_name, login, password, additional_info)

    def add_account_to_existing_game(message: Message, game_name: str, login: str, password: str, additional_info: str):
        games = load_games()
        for game in games:
            if game.name == game_name:
                account = Account(login=login, password=password, additional_info=additional_info)
                game.accounts.append(account)
                save_games(games)
                bot.send_message(message.chat.id, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É {game_name}!")
                return
        bot.send_message(message.chat.id, f"‚ùå –ò–≥—Ä–∞ {game_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    @bot.callback_query_handler(func=lambda call: call.data.startswith(("info_game:", "delete_from_game:")))
    def handle_game_callbacks(call):
        action, game_name = call.data.split(":")
        
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        
        games = load_games()
        game = next((g for g in games if g.name == game_name), None)
        
        if not game:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        if action == "info_game":
            info_msg = format_game_info(game)
            bot.send_message(call.message.chat.id, info_msg, parse_mode="Markdown")
        
        elif action == "delete_from_game":
            if not game.accounts:
                bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–π –∏–≥—Ä–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
                return
                
            keyboard = K()
            for acc in game.accounts:
                status = "üîí" if acc.is_rented else "‚úÖ"
                keyboard.add(B(f"{status} {acc.login}", callback_data=f"delete_account:{game_name}:{acc.login}"))
            
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_account:"))
    def handle_delete_account(call):
        _, game_name, login = call.data.split(":")
        
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        
        games = load_games()
        game = next((g for g in games if g.name == game_name), None)
        
        if game:
            game.accounts = [acc for acc in game.accounts if acc.login != login]
            save_games(games)
            bot.send_message(call.message.chat.id, f"–ê–∫–∫–∞—É–Ω—Ç {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥—Ä—ã {game_name}")
            update_lot(call.message, game, cardinal)
        else:
            bot.send_message(call.message.chat.id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def create_new_lot(acc: Account, lot: FunPayAPI.types.LotFields):
        lot_id = lot.lot_id
        fields = lot.fields
        fields["offer_id"] = "0"
        fields["csrf_token"] = acc.csrf_token
        lot.set_fields(fields)
        lot.lot_id = 0

        attempts = 3
        while attempts:
            try:
                url = acc.save_lot(lot)
                logger.info(f"[LOTS COPY] –°–æ–∑–¥–∞–ª –ª–æ—Ç {lot_id}.")
                return url
            except Exception as e:
                print(e)
                logger.error(f"[LOTS COPY] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ—Ç {lot_id}.")
                logger.debug("TRACEBACK", exc_info=True)
                if isinstance(e, FunPayAPI.exceptions.RequestFailedError):
                    logger.debug(e.response.content.decode())
                time.sleep(2)
                attempts -= 1
        else:
            raise Exception("Failed to create lot after multiple attempts")

    def handle_change_password(message: Message):
        msg = bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞:")
        bot.register_next_step_handler(msg, process_change_password_login)

    def process_change_password_login(message: Message):
        login = message.text
        games = load_games()
        
        account_found = False
        for game in games:
            for account in game.accounts:
                if account.login == login:
                    account_found = True
                    msg = bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
                    bot.register_next_step_handler(msg, lambda m: process_change_password_final(m, login))
                    break
            if account_found:
                break
                
        if not account_found:
            bot.send_message(message.chat.id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def process_change_password_final(message: Message, login: str):
        new_password = message.text
        games = load_games()
        
        password_changed = False
        for game in games:
            for account in game.accounts:
                if account.login == login:
                    account.password = new_password
                    password_changed = True
                    
        if password_changed:
            save_games(games)
            bot.send_message(message.chat.id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {login} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è")

    cardinal.add_telegram_commands(UUID, [
        ("add_account_ps", "–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –∏–≥—Ä—É", True),
        ("add_account_to_game_ps", "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ", True),
        ("get_info_about_game_ps", "–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ", True),
        ("delete_account_from_game_ps", "—É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∏–≥—Ä—ã", True),
        ("change_password_ps", "–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞", True),
    ])

    tg.msg_handler(handle_add_account, commands=["add_account_ps"])
    tg.msg_handler(handle_add_account_to_game, commands=["add_account_to_game_ps"])
    tg.msg_handler(handle_get_info_about_game, commands=["get_info_about_game_ps"])
    tg.msg_handler(handle_delete_account_from_game, commands=["delete_account_from_game_ps"])
    tg.msg_handler(handle_change_password, commands=["change_password_ps"])

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None
